// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  fullName  String
  email     String    @unique
  password  String
  token     String    @unique
  status    String    @default("active")
  deleted   Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  createdTasks  Task[]       @relation("CreatedTasks")
  assignedTasks TaskOnUser[]
}

model Task {
  id         Int       @id @default(autoincrement())
  title      String
  status     String
  content    String
  timeStart  DateTime?
  timeFinish DateTime?
  deleted    Boolean   @default(false)
  deleteAt   DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  taskParent   Task?  @relation("TaskParent", fields: [taskParentId], references: [id])
  taskParentId Int?
  subTasks     Task[] @relation("TaskParent")

  createdBy   User @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById Int

  assignedUsers TaskOnUser[]
}

model TaskOnUser {
  task   Task @relation(fields: [taskId], references: [id])
  taskId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  assignedAt DateTime @default(now())

  @@id([taskId, userId])
}
